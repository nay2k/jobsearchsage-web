{"version":3,"file":"path.js","sources":["../../src/utils/path.ts"],"sourcesContent":["import { range, min, max } from 'd3-array'\nimport { line, curveCardinal, curveCardinalClosed } from 'd3-shape'\nimport { Path } from 'd3-path'\n\n// Utils\nimport { clamp } from 'utils/data'\n\nexport type RoundedRectPathOptions = {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n  r: number;\n  tl: boolean;\n  tr: boolean;\n  bl: boolean;\n  br: boolean;\n}\n\n/*\n * Generate SVG path for rectangle with rounded corners\n *\n * @param {Object} props - Configuration object\n * @param {Number} props.x - Rect top left X coordinate\n * @param {Number} props.y - Rect top left Y coordinate\n * @param {Number} props.w - Rect width\n * @param {Number} props.h - Rect height\n * @param {Bool} [props.tl=false] - Round top left corner\n * @param {Bool} [props.tr=false] - Round top right corner\n * @param {Bool} [props.bl=false] - Round bottom left corner\n * @param {Bool} [props.br=false] - Round bottom right corner\n * @param {Number} [props.r=0] - Corner Radius\n * @return {String} Path string for the `d` attribute\n */\nexport function roundedRectPath ({\n  x,\n  y,\n  w,\n  h,\n  tl = false,\n  tr = false,\n  bl = false,\n  br = false,\n  r = 0,\n}: RoundedRectPathOptions): string {\n  let path\n  path = `M${x + r},${y}h${w - 2 * r}`\n\n  let roundedR = tr ? r : 0\n  let angularR = tr ? 0 : r\n  path += `a${roundedR},${roundedR} 0 0 1 ${roundedR},${roundedR}`\n  path += `h${angularR}v${angularR}`\n  path += `v${h - 2 * r}`\n\n  roundedR = br ? r : 0\n  angularR = br ? 0 : r\n  path += `a${roundedR},${roundedR} 0 0 1 ${-roundedR},${roundedR}`\n  path += `v${angularR}h${-angularR}`\n  path += `h${2 * r - w}`\n\n  roundedR = bl ? r : 0\n  angularR = bl ? 0 : r\n  path += `a${roundedR},${roundedR} 0 0 1 ${-roundedR},${-roundedR}`\n  path += `h${-angularR}v${-angularR}`\n  path += `v${2 * r - h}`\n\n  roundedR = tl ? r : 0\n  angularR = tl ? 0 : r\n  path += `a${roundedR},${roundedR} 0 0 1 ${roundedR},${-roundedR}`\n  path += `v${-angularR}h${angularR}`\n\n  path += 'z'\n  return path\n}\n\nexport function polygon (size: number, n = 6, endAngle = 2 * Math.PI, open = false): string {\n  const r = n === 4 ? Math.sqrt(0.5) * size : size / 3.6 * 2\n  const deltaAngle = n === 4 ? Math.PI / 4 : 0 // rotate to 45 grads if shape is a rectangle\n  const shiftedEndAngle = endAngle - deltaAngle\n\n  const completion = (shiftedEndAngle < 0 ? endAngle : shiftedEndAngle) / (2 * Math.PI)\n  const nSegments = Math.ceil(n * completion)\n\n  const centerAngle = 1 / n * Math.PI * 2 //          /\\\n  const baseAngle = (Math.PI - centerAngle) / 2 //   /__\\\n\n  const data = range(nSegments + (shiftedEndAngle >= 0 ? 1 : 0))\n    .map((d, i) => {\n      const isLastSegment = i === nSegments || (nSegments === 1 && shiftedEndAngle < 0)\n      let mult = isLastSegment ? ((completion * n) % 1 || 1) : 1 // Handle partial shape\n      if (shiftedEndAngle < 0) {\n        mult += 0.5\n      }\n      const angle = centerAngle * (i - 1 + mult)\n\n      let radius\n      if (isLastSegment) {\n        const thirdAngle = Math.PI - baseAngle - centerAngle * mult\n        radius = r * Math.sin(baseAngle) / Math.sin(thirdAngle) // Law of sines\n      } else {\n        radius = r\n      }\n\n      return {\n        x: Math.sin(angle + deltaAngle) * radius,\n        y: -Math.cos(angle + deltaAngle) * radius,\n      }\n    })\n\n  if (n === 4) {\n    const angle = centerAngle * (-1 + 0.5)\n    const thirdAngle = Math.PI * 0.5\n    const radius = r * Math.sin(baseAngle) / Math.sin(thirdAngle) // Law of sines\n    data.unshift({\n      x: Math.sin(angle + deltaAngle) * radius,\n      y: -Math.cos(angle + deltaAngle) * radius,\n    })\n  }\n\n  const path = line<any>()\n    /* eslint-disable-next-line dot-notation */\n    .x(d => d['x'])\n    /* eslint-disable-next-line dot-notation */\n    .y(d => d['y'])\n    .curve((open ? curveCardinal : curveCardinalClosed).tension(0.95))\n\n  return path(data)\n}\n\nexport function circlePath (cx: number, cy: number, r: number): string {\n  return `\n    M ${cx} ${cy}\n    m ${-r}, 0\n    a ${r},${r} 0 1,1 ${r * 2},0\n    a ${r},${r} 0 1,1 ${-r * 2},0`\n}\n\nexport type ScoreRectPathOptions = {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n  r: number;\n  score: number;\n}\n\nexport function scoreRectPath ({ x, y, w, h, r = 0, score = 1 }: ScoreRectPathOptions): string {\n  let path\n  const side = 1 / 4\n  const halfSide = side / 2\n  let part = score\n\n  //    8 1\n  //    - -\n  // 7 |   | 2\n  // 6 |   | 3\n  //    - -\n  //    5 4\n\n  // 1\n  const hLength = min([w * 0.5 * (part / halfSide) + r, w * 0.5 - r])\n  path = `M${x + w * 0.5},${y}h${hLength}`\n\n  // 2, 3\n  part = score - 1 / 8\n  if (part > 0) {\n    path += `a${r},${r} 0 0 1 ${r},${r}`\n    const vLength = clamp(h * (part / side) - r, 0, h - 2 * r)\n    path += `v${vLength}`\n  }\n\n  // 4, 5\n  part = score - 3 / 8\n  if (part > 0) {\n    path += `a${r},${r} 0 0 1 ${-r},${r}`\n    const hLength = clamp(r - w * (part / side), 2 * r - w, 0)\n    path += `h${hLength}`\n  }\n\n  // 6, 7\n  part = score - 5 / 8\n  if (part > 0) {\n    path += `a${r},${r} 0 0 1 ${-r},${-r}`\n    const vLength = clamp(r - h * (part / side), 2 * r - h, 0)\n    path += `v${vLength}`\n  }\n\n  // 8\n  part = score - 7 / 8\n  if (part > 0) {\n    path += `a${r},${r} 0 0 1 ${r},${-r}`\n    const hLength = max([w * 0.5 * (part / halfSide) - r, 0])\n    path += `h${hLength}`\n  }\n\n  return path\n}\n\n/*\n * Replace L path command with arc with specified radius\n * @param {String} path - the path string\n * @param {number} r - radius in pixels\n * @returns {String} new path string\n */\nexport function convertLineToArc (path: Path | string, r: number): string {\n  return path.toString().replace(/L(?<x>-?\\d*\\.?\\d*),(?<y>-?\\d+\\.?\\d*)/gm, (_, x, y) => `A ${r} ${r} 0 0 0 ${x} ${y}`)\n}\n\n/**\n * Generate an SVG path string for an arrow that follows a polyline path.\n * The arrow is composed of line segments between points and a triangular arrowhead at the end.\n *\n * @param opts - ArrowPolylinePathOptions object containing array of points and optional head dimensions.\n * @returns SVG path string for the arrow.\n */\nexport function arrowPolylinePath (\n  points: [number, number][],\n  arrowHeadLength = 8,\n  arrowHeadWidth = 6,\n  smoothing = 5\n): string {\n  if (points.length < 2) return ''\n\n  // Calculate total path length\n  let totalLength = 0\n  for (let i = 0; i < points.length - 1; i++) {\n    const [x1, y1] = points[i]\n    const [x2, y2] = points[i + 1]\n    totalLength += Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))\n  }\n\n  // If the total length is zero or nearly zero, don't draw anything\n  if (totalLength === 0) return ''\n\n  // Let the default values be modifiable based on the line length\n  let headLength = arrowHeadLength\n  let headWidth = arrowHeadWidth\n\n  // If the line is very short, scale down the arrow head dimensions\n  const threshold = arrowHeadLength * 2\n  if (totalLength < threshold) {\n    const scale = totalLength / threshold\n    headLength *= scale\n    headWidth *= scale\n  }\n\n  // Ensure the arrow head length is never longer than the line itself\n  headLength = Math.min(headLength / 2, totalLength)\n\n  // Get the last two points for arrowhead calculation\n  const [lastX, lastY] = points[points.length - 1]\n  const [prevX, prevY] = points[points.length - 2]\n\n  // Calculate direction vector for the last segment\n  const dx = lastX - prevX\n  const dy = lastY - prevY\n  const segmentLength = Math.sqrt(dx * dx + dy * dy)\n  const ux = dx / segmentLength\n  const uy = dy / segmentLength\n\n  // Tail point of the arrow (where the arrowhead starts)\n  const tailX = lastX - headLength * ux\n  const tailY = lastY - headLength * uy\n\n  // Perpendicular vector for arrowhead width calculation\n  const perpX = -uy\n  const perpY = ux\n\n  // Calculate the two base points of the arrowhead triangle\n  const leftX = tailX + (headWidth / 2) * perpX\n  const leftY = tailY + (headWidth / 2) * perpY\n  const rightX = tailX - (headWidth / 2) * perpX\n  const rightY = tailY - (headWidth / 2) * perpY\n\n  // Build the path\n  const pathParts = []\n\n  if (points.length === 2) {\n    // For a single segment, create a curved path\n    const [startX, startY] = points[0]\n\n    // Adjust smoothing based on segment length\n    const adjustedSmoothing = Math.min(smoothing, segmentLength / 3)\n\n    // Calculate control points for a cubic Bézier curve with adjusted smoothing\n    const cp1x = startX + ux * adjustedSmoothing\n    const cp1y = startY + uy * adjustedSmoothing + perpY * adjustedSmoothing * 0.5\n\n    const cp2x = tailX - ux * adjustedSmoothing\n    const cp2y = tailY - uy * adjustedSmoothing + perpY * adjustedSmoothing * 0.5\n\n    // Start path and add cubic Bézier curve\n    pathParts.push(`M${startX},${startY}`)\n    pathParts.push(`C${cp1x},${cp1y} ${cp2x},${cp2y} ${lastX},${lastY}`)\n  } else {\n    // For multiple segments, use smooth Bézier corners with absolute smoothing\n    pathParts.push(`M${points[0][0]},${points[0][1]}`)\n\n    for (let i = 0; i < points.length - 2; i++) {\n      const [x1, y1] = points[i]\n      const [x2, y2] = points[i + 1]\n      const [x3, y3] = points[i + 2]\n\n      // Calculate vectors for the current and next segment\n      const v1x = x2 - x1\n      const v1y = y2 - y1\n      const v2x = x3 - x2\n      const v2y = y3 - y2\n\n      // Calculate lengths of segments\n      const len1 = Math.sqrt(v1x * v1x + v1y * v1y)\n      const len2 = Math.sqrt(v2x * v2x + v2y * v2y)\n\n      // Calculate unit vectors\n      const u1x = v1x / len1\n      const u1y = v1y / len1\n      const u2x = v2x / len2\n      const u2y = v2y / len2\n\n      // Adjust smoothing based on the minimum segment length\n      const minSegmentLength = Math.min(len1, len2)\n      const adjustedSmoothing = Math.min(smoothing, minSegmentLength / 3)\n\n      // Calculate the corner points and control points with adjusted smoothing\n      const corner1x = x2 - u1x * adjustedSmoothing\n      const corner1y = y2 - u1y * adjustedSmoothing\n      const corner2x = x2 + u2x * adjustedSmoothing\n      const corner2y = y2 + u2y * adjustedSmoothing\n\n      // Add line to approach point\n      pathParts.push(`L${corner1x},${corner1y}`)\n\n      // Add cubic Bézier curve for the corner\n      pathParts.push(`C${x2},${y2} ${x2},${y2} ${corner2x},${corner2y}`)\n    }\n\n    // Add the final line segment to the tail point\n    pathParts.push(`L${lastX},${lastY}`)\n  }\n\n  // Add the arrowhead\n  pathParts.push(`M${leftX},${leftY} L${lastX},${lastY} L${rightX},${rightY}`)\n\n  return pathParts.join(' ')\n}\n"],"names":[],"mappings":"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"}