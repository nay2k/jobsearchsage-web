{"version":3,"file":"config.js","sources":["../../../src/components/crosshair/config.ts"],"sourcesContent":["import { XYComponentConfigInterface, XYComponentDefaultConfig } from 'core/xy-component/config'\nimport { Tooltip } from 'components/tooltip'\n\n// Types\nimport { NumericAccessor, ColorAccessor } from 'types/accessor'\nimport { ContinuousScale } from 'types/scale'\nimport { WithOptional } from 'types/misc'\nimport { CrosshairCircle } from './types'\n\n// We extend partial XY config interface because x and y properties are optional for Crosshair\nexport interface CrosshairConfigInterface<Datum> extends WithOptional<XYComponentConfigInterface<Datum>, 'x' | 'y'> {\n  /** Optional accessor function for getting the values along the X axis. Default: `undefined` */\n  x?: NumericAccessor<Datum>;\n  /** Optional single of multiple accessor functions for getting the values along the Y axis. Default: `undefined` */\n  y?: NumericAccessor<Datum> | NumericAccessor<Datum>[];\n  /** Optional color array or color accessor function for crosshair circles. Default: `d => d.color` */\n  color?: ColorAccessor<Datum>;\n  /** Optional stroke color accessor function for crosshair circles. Default: `undefined` */\n  strokeColor?: ColorAccessor<Datum>;\n  /** Optional stroke width for crosshair circles. Default: `undefined` */\n  strokeWidth?: NumericAccessor<Datum>;\n  /** Separate array of accessors for stacked components (eg StackedBar, Area). Default: `undefined` */\n  yStacked?: NumericAccessor<Datum>[];\n  /** Baseline accessor function for stacked values, useful with stacked areas. Default: `null` */\n  baseline?: NumericAccessor<Datum>;\n  /** An instance of the Tooltip component to be used with Crosshair. Default: `undefined` */\n  tooltip?: Tooltip | undefined;\n  // TODO: Change `datum` type to `Datum | undefined`. This may break the build for many people, so we might want to do it in version 2.0\n  /** Tooltip template accessor. The function is supposed to return either a valid HTML string or an HTMLElement.\n   * When `snapToData` is `false`, `datum` will be `undefined` but `data` and `leftNearestDatumIndex` will be provided.\n   * Default: `d => ''` */\n  template?: (datum: Datum, x: number | Date, data: Datum[], leftNearestDatumIndex: number) => string | HTMLElement;\n  /** Hide Crosshair when the corresponding datum element is far from mouse pointer. Default: `true` */\n  hideWhenFarFromPointer?: boolean;\n  /** Distance in pixels to check in the hideWhenFarFromPointer condition. Default: `100` */\n  hideWhenFarFromPointerDistance?: number;\n  /** Snap to the nearest data point.\n   * If disabled, the tooltip template will receive only the horizontal position of the crosshair and you'll be responsible\n   * for getting the underlying data records and crosshair circles (see the `getCircles` configuration option).\n   * Default: `true`\n  */\n  snapToData?: boolean;\n  /** Custom function for setting up the crosshair circles, usually needed when `snapToData` is set to `false`.\n   * The function receives the horizontal position of the crosshair (in the data space, not in pixels), the data array,\n   * the `yScale` instance to help you calculate the correct vertical position of the circles, and the nearest datum index.\n   * It has to return an array of the `CrosshairCircle` objects: `{ y: number; color: string; opacity?: number }[]`.\n   * Default: `undefined`\n  */\n  getCircles?: (x: number | Date, data: Datum[], yScale: ContinuousScale, leftNearestDatumIndex: number) => CrosshairCircle[];\n  /** Callback function that is called when the crosshair is moved:\n   * - `x` is the horizontal position of the crosshair in the data space;\n   * - `datum` is the nearest datum to the crosshair;\n   * - `datumIndex` is the index of the nearest datum.\n   * - `event` is the event that triggered the crosshair move (mouse or wheel).\n   *\n   * When the mouse goes out of the container and on wheel events, all the arguments are `undefined` except for `event`.\n   * Default: `undefined` */\n  onCrosshairMove?: (x?: number | Date, datum?: Datum, datumIndex?: number, event?: MouseEvent | WheelEvent) => void;\n  /** Force the crosshair to show at a specific position. Default: `undefined` */\n  forceShowAt?: number | Date;\n}\n\nexport const CrosshairDefaultConfig: CrosshairConfigInterface<unknown> = {\n  ...XYComponentDefaultConfig,\n  yStacked: undefined,\n  baseline: null,\n  duration: 100,\n  tooltip: undefined,\n  template: <Datum>(d: Datum, x: number | Date, data: Datum[], leftNearestDatumIndex: number): string => '',\n  hideWhenFarFromPointer: true,\n  hideWhenFarFromPointerDistance: 100,\n  snapToData: true,\n  getCircles: undefined,\n  color: undefined,\n  strokeColor: undefined,\n  strokeWidth: undefined,\n  onCrosshairMove: undefined,\n  forceShowAt: undefined,\n}\n\n"],"names":[],"mappings":";;AA8DO,MAAM,sBAAsB,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAC9B,wBAAwB,CAC3B,EAAA,EAAA,QAAQ,EAAE,SAAS,EACnB,QAAQ,EAAE,IAAI,EACd,QAAQ,EAAE,GAAG,EACb,OAAO,EAAE,SAAS,EAClB,QAAQ,EAAE,CAAQ,CAAQ,EAAE,CAAgB,EAAE,IAAa,EAAE,qBAA6B,KAAa,EAAE,EACzG,sBAAsB,EAAE,IAAI,EAC5B,8BAA8B,EAAE,GAAG,EACnC,UAAU,EAAE,IAAI,EAChB,UAAU,EAAE,SAAS,EACrB,KAAK,EAAE,SAAS,EAChB,WAAW,EAAE,SAAS,EACtB,WAAW,EAAE,SAAS,EACtB,eAAe,EAAE,SAAS,EAC1B,WAAW,EAAE,SAAS;;;;"}