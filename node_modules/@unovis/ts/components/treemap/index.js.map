{"version":3,"file":"index.js","sources":["../../../src/components/treemap/index.ts"],"sourcesContent":["import { Selection, select } from 'd3-selection'\nimport { hierarchy, HierarchyNode, treemap } from 'd3-hierarchy'\nimport { group, max, extent } from 'd3-array'\nimport { scaleLinear, scaleThreshold } from 'd3-scale'\nimport { hsl } from 'd3-color'\nimport { ComponentCore } from 'core/component'\nimport { SeriesDataModel } from 'data-models/series'\nimport { getColor, brighter, getHexValue } from 'utils/color'\nimport { getString, getNumber, isNumber } from 'utils/data'\nimport { smartTransition } from 'utils/d3'\nimport { trimSVGText } from 'utils/text'\nimport { TrimMode } from 'types/text'\nimport { TreemapConfigInterface, TreemapDefaultConfig } from './config'\nimport { TreemapDatum, TreemapNode } from './types'\nimport * as s from './style'\n\nexport class Treemap<Datum> extends ComponentCore<Datum[], TreemapConfigInterface<Datum>> {\n  static selectors = s\n  protected _defaultConfig = TreemapDefaultConfig as TreemapConfigInterface<Datum>\n  public config: TreemapConfigInterface<Datum> = this._defaultConfig\n\n  /** Default number format for tile labels. */\n  private _defaultNumberFormat (value: number): string {\n    return `${value}`\n  }\n\n  datamodel: SeriesDataModel<Datum> = new SeriesDataModel()\n  tiles: Selection<SVGGElement, unknown, SVGGElement, unknown>\n\n  private _isTileLargeEnough (d: TreemapNode<Datum>): boolean {\n    const w = d.x1 - d.x0\n    const h = d.y1 - d.y0\n    return (w >= this.config.minTileSizeForLabel) && (h >= this.config.minTileSizeForLabel)\n  }\n\n  private _getTileLightness (node: TreemapNode<Datum>, siblings: TreemapNode<Datum>[]): number {\n    // Get the value extent of the sibling group\n    const [minValue, maxValue] = extent(siblings, d => d.value)\n\n    // If there's no range or no value, return default lightness\n    if (minValue === maxValue || !node.value) return 0\n\n    // Calculate relative position in the range (0 to 1)\n    // Larger values will be closer to 0 (darker)\n    return this.config.lightnessVariationAmount * ((maxValue - node.value) / (maxValue - minValue))\n  }\n\n  constructor (config?: TreemapConfigInterface<Datum>) {\n    super()\n    if (config) this.setConfig(config)\n    this.tiles = this.g.append('g').attr('class', s.tiles)\n  }\n\n  _render (customDuration?: number): void {\n    super._render(customDuration)\n    const { config, datamodel: { data }, _width, _height } = this\n    const { numberFormat } = config\n    const formatNumber = numberFormat ?? this._defaultNumberFormat.bind(this)\n    const duration = isNumber(customDuration) ? customDuration : config.duration\n\n    if (!config.layers?.length) {\n      console.warn('Unovis | Treemap: No layers defined')\n      return\n    }\n\n    // Map each layer accessor function to get string values from the data array\n    const layerAccessors = config.layers.map(layerAccessor => {\n      return (i: number) => getString(data[i], layerAccessor, i)\n    })\n\n    // Group the data indices by the layer accessors to create a hierarchical structure\n    const nestedData = group(data.keys(), ...layerAccessors as [(d: number) => string])\n\n    // Create the hierarchy from the grouped data,\n    // which by itself is not quite right because there is an extra\n    // level of nesting that we don't want, just above the leaf nodes.\n    const rootNode = hierarchy(nestedData)\n\n    // Compute the aggregation\n    if (config.value) {\n      rootNode.sum(index => typeof index === 'number' && getNumber(data[index], config.value, index))\n    } else {\n      rootNode.count()\n    }\n\n    // Fix the hierarchy by removing the extra level of nesting\n    rootNode.each(node => {\n      if (!node.children && node.parent) {\n        node.parent.children = null\n      }\n    })\n\n    const treemapLayout = treemap()\n      .size([_width, _height])\n      .round(true)\n      .padding(config.tilePadding)\n\n    // Apply padding to the top of each tile,\n    // but not for the root node.\n    if (this.config.tilePaddingTop !== undefined) {\n      treemapLayout.paddingTop(d => d.parent ? config.tilePaddingTop : 0)\n    }\n\n    // Compute the treemap layout\n    const treemapData = treemapLayout(rootNode) as TreemapNode<Datum>\n\n    // Process the resulting hierarchy into the type we need\n    let nodeId = 0\n    treemapData.each(node => {\n      const n = node as unknown as HierarchyNode<[string, number[]]>\n      // Generate unique IDs for each node\n      node._id = `node-${nodeId++}`\n\n      const treemapDatum: TreemapDatum<Datum> = {\n        key: n.data[0],\n      }\n\n      // Populate the index and datum for leaf nodes\n      const isLeafNode = !n.children\n      if (isLeafNode) {\n        treemapDatum.index = n.data[1][0]\n        treemapDatum.datum = data[treemapDatum.index]\n      }\n\n      node.data = treemapDatum\n    })\n\n    const descendants = treemapData.descendants()\n\n    // Set up the brightness increase scale based on depth\n    const maxDepth = max(descendants, d => d.depth)\n\n    const brightnessIncrease = scaleLinear()\n      .domain([1, maxDepth])\n      .range([0, 1])\n\n    // Get all leaf node values and calculate their square roots\n    // (since area is proportional to value)\n    const leafValues = descendants.filter(d => !d.children).map(d => d.value)\n    const maxLeafValue = Math.sqrt(max(leafValues)) || 0\n    // Divide the range into three equal intervals based on the square root of values\n    // This accounts for the fact that area is proportional to value\n    const fontSizeScale = scaleThreshold<number, number>()\n      .domain([\n        maxLeafValue / 3, // First third of the max value\n        (maxLeafValue * 2) / 3, // Second third of the max value\n      ])\n      .range([\n        config.tileLabelSmallFontSize,\n        config.tileLabelMediumFontSize,\n        config.tileLabelLargeFontSize,\n      ])\n\n    // First pass: Set base colors without considering tileColor config\n    treemapData.eachBefore((node) => {\n      // Get base color: user accessor or default\n      let color = config.tileColor\n        ? getColor(node, config.tileColor)\n        : getColor(node, undefined, node.parent?.children?.indexOf(node), node.depth !== 1)\n\n      // Fallback to parent color if needed\n      color = color ?? (node.parent as TreemapNode<Datum>)?._fill\n\n      const hexColor = color ? getHexValue(color, this.g.node()) : null\n\n      if (hexColor) {\n        const hslColor = hsl(hexColor)\n\n        // Lightness adjustment for siblings (if enabled)\n        if (config.enableLightnessVariance && !node.children && node.parent) {\n          const siblings = node.parent.children\n          const lightnessAdjustment = this._getTileLightness(node, siblings)\n          hslColor.l = Math.min(1, hslColor.l + lightnessAdjustment)\n        }\n\n        // Brightness increase for depth\n        node._fill = brighter(hslColor.toString(), brightnessIncrease(node.depth))\n      } else {\n        node._fill = null\n      }\n    })\n\n    // Render tiles\n    const visibleNodes = descendants.filter(d => d.depth > 0)\n    const tiles = this.tiles\n      .selectAll<SVGGElement, TreemapNode<Datum>>(`g.${s.tileGroup}`)\n      .data(visibleNodes, d => `${d.data.key}-${d.depth}`)\n\n    const tilesEnter = tiles\n      .enter()\n      .append('g')\n      .attr('class', s.tileGroup)\n\n    // Computes the rect border radius for a given tile.\n    // The rx and ry values are the minimum of the tile\n    // border radius and some fraction the width of the tile,\n    // based on the tileBorderRadiusFactor config.\n    // This ensures that the tile border radius is not\n    // larger than the tile size, which makes small tiles\n    // look better.\n    const rx = (d: TreemapNode<Datum>): number =>\n      Math.min(config.tileBorderRadius, (d.x1 - d.x0) * config.tileBorderRadiusFactor)\n\n    // Tile rectangles\n    tilesEnter\n      .append('rect')\n      .classed(s.tile, true)\n\n      // Make the leaf tiles clickable if a click handler is provided\n      .classed(s.clickableTile, d => config.showTileClickAffordance && !d.children)\n\n      .attr('rx', rx)\n      .attr('ry', rx)\n      // Initialize tile positions so that the initial transition is smooth\n      .attr('x', d => d.x0)\n      .attr('y', d => d.y0)\n      .attr('width', d => d.x1 - d.x0)\n      .attr('height', d => d.y1 - d.y0)\n      .style('fill', d => d._fill ?? getColor(d, config.tileColor))\n      .style('opacity', 0)\n      .style('cursor', config.showTileClickAffordance ? d => !d.children ? 'pointer' : null : null)\n\n\n    const mergedTiles = tiles.merge(tilesEnter)\n\n    smartTransition(mergedTiles.select(`rect.${s.tile}`), duration)\n      .style('fill', d => d._fill ?? getColor(d, config.tileColor))\n      .style('opacity', 1)\n      .attr('x', d => d.x0)\n      .attr('y', d => d.y0)\n      .attr('width', d => d.x1 - d.x0)\n      .attr('height', d => d.y1 - d.y0)\n\n    // Update clipPath rects\n    let svg: Element | null = this.g.node()\n    while (svg && !(svg instanceof SVGSVGElement)) svg = svg.parentElement\n    const defs = svg ? (select(svg).select('defs').empty() ? select(svg).append('defs') : select(svg).select('defs')) : null\n    if (!defs) return\n    const defsSelection = (defs as Selection<SVGDefsElement, unknown, null, undefined>)\n    const clipPaths = defsSelection.selectAll<SVGClipPathElement, TreemapNode<Datum>>('clipPath')\n      .data(visibleNodes, (d: TreemapNode<Datum>) => d._id)\n\n    clipPaths.enter()\n      .append('clipPath')\n      .attr('id', (d: TreemapNode<Datum>) => `clip-${d._id}`)\n      .append('rect')\n      .attr('x', (d: TreemapNode<Datum>) => d.x0)\n      .attr('y', (d: TreemapNode<Datum>) => d.y0)\n      .attr('width', (d: TreemapNode<Datum>) => Math.max(0.1, d.x1 - d.x0))\n      .attr('height', (d: TreemapNode<Datum>) => Math.max(0.1, d.y1 - d.y0))\n      .attr('rx', rx)\n      .attr('ry', rx)\n\n    clipPaths.exit().remove()\n\n    tilesEnter\n      .append('g')\n      .attr('class', s.labelGroup)\n      .attr('transform', d => `translate(${d.x0 + config.labelOffsetX},${d.y0 + config.labelOffsetY})`)\n      .append('text')\n      .attr('class', s.label)\n      .attr('x', 0)\n      .attr('y', 0)\n      .style('opacity', 0)\n\n    const getTileLabel = config.tileLabel ?? ((d: TreemapNode<Datum>) => `${d.data.key}: ${formatNumber(d.value)}`)\n    const textSelection = mergedTiles.selectAll<SVGTextElement, TreemapNode<Datum>>(`g.${s.labelGroup} text`)\n    textSelection\n      .text(d => getTileLabel(d))\n      .style('font-size', function (d) {\n        const sqrtVal = Math.sqrt(d.value ?? 0)\n        return config.enableTileLabelFontSizeVariation && !d.children\n          ? `${fontSizeScale(sqrtVal)}px`\n          : `${fontSizeScale.range()[1]}px`\n      })\n      .attr('dominant-baseline', 'middle')\n\n    // Trim label and set dominant-baseline for tspans in one pass\n    textSelection.each((d, i, nodes) => {\n      const text = select(nodes[i] as SVGTextElement)\n      const tileWidth = d.x1 - d.x0 - (config.labelOffsetX ?? 0) * 2\n      const fullLabel = text.text()\n      let fontSize = parseFloat(text.style('font-size'))\n      if (!fontSize) {\n        fontSize = parseFloat(window.getComputedStyle(nodes[i] as SVGTextElement).fontSize)\n      }\n      trimSVGText(text, tileWidth, TrimMode.End, true, fontSize)\n      text.attr('title', fullLabel)\n      text.selectAll('tspan').attr('dominant-baseline', 'middle')\n    })\n\n    // Transition group position\n    smartTransition(mergedTiles.select(`g.${s.labelGroup}`), duration)\n      .attr('transform', d => `translate(${d.x0 + config.labelOffsetX},${d.y0 + config.labelOffsetY})`)\n\n    // Transition text opacity only (fade-in)\n    smartTransition(mergedTiles.select(`g.${s.labelGroup} text`), duration)\n      .style('opacity', 1)\n\n    // Hide labels that don't meet criteria\n    mergedTiles.select(`text.${s.label}`)\n      .style('display', d => {\n        const isAllowedNode = config.labelInternalNodes ? true : !d.children\n        return isAllowedNode && this._isTileLargeEnough(d) ? null : 'none'\n      })\n      // Make the internal labels semibold via class\n      .attr('class', d => d.children ? `${s.label} ${s.internalLabel}` : s.label)\n\n    smartTransition(tiles.exit(), duration)\n      .style('opacity', 0)\n      .remove()\n  }\n}\n"],"names":["s.tiles","s.tileGroup","s.tile","s.clickableTile","s.labelGroup","s.label","s.internalLabel","s"],"mappings":"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"}