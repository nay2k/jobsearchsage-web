import { defineComponent as p, inject as m, computed as f, ref as v, onMounted as b, nextTick as y, onUnmounted as F, watch as s, createElementBlock as B, openBlock as L } from "vue";
import { Treemap as c } from "@unovis/ts";
import { useForwardProps as _, arePropsEqual as g } from "../../utils/props.js";
import { componentAccessorKey as S } from "../../utils/context.js";
const T = { "data-vis-component": "" }, w = c.selectors, C = /* @__PURE__ */ p({
  __name: "index",
  props: {
    id: { type: Function },
    value: {},
    layers: {},
    numberFormat: { type: Function },
    tileColor: {},
    tilePadding: {},
    tilePaddingTop: {},
    labelInternalNodes: { type: Boolean },
    labelOffsetX: {},
    labelOffsetY: {},
    tileBorderRadius: {},
    tileBorderRadiusFactor: {},
    enableLightnessVariance: { type: Boolean },
    enableTileLabelFontSizeVariation: { type: Boolean },
    tileLabelSmallFontSize: {},
    tileLabelMediumFontSize: {},
    tileLabelLargeFontSize: {},
    showTileClickAffordance: { type: Boolean },
    lightnessVariationAmount: {},
    minTileSizeForLabel: {},
    tileLabel: { type: Function },
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(u, { expose: d }) {
    const o = m(S), l = u, a = f(() => o.data.value ?? l.data), n = _(l), t = v();
    return b(() => {
      y(() => {
        var e;
        t.value = new c(n.value), (e = t.value) == null || e.setData(a.value), o.update(t.value);
      });
    }), F(() => {
      var e;
      (e = t.value) == null || e.destroy(), o.destroy();
    }), s(n, (e, i) => {
      var r;
      g(e, i) || (r = t.value) == null || r.setConfig(n.value);
    }), s(a, () => {
      var e;
      (e = t.value) == null || e.setData(a.value);
    }), d({
      component: t
    }), (e, i) => (L(), B("div", T));
  }
});
export {
  w as VisTreemapSelectors,
  C as default
};
//# sourceMappingURL=index.js.map
